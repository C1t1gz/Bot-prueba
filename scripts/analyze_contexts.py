#!/usr/bin/env python3
"""
Script para analizar las estad√≠sticas de contextos almacenados
"""

import sys
import os
from pathlib import Path

# Agregar el directorio padre al path para importar m√≥dulos del proyecto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.utils.context_storage import context_storage
from src.utils.logger import logger

def print_header(title: str):
    """Imprime un encabezado formateado"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_section(title: str):
    """Imprime un t√≠tulo de secci√≥n"""
    print(f"\nüìä {title}")
    print("-" * 40)

def analyze_contexts():
    """Funci√≥n principal para analizar contextos"""
    print_header("AN√ÅLISIS DE CONTEXTOS DE CONSULTAS")
    
    try:
        # Obtener estad√≠sticas
        stats = context_storage.get_query_statistics()
        
        # Estad√≠sticas generales
        print_section("ESTAD√çSTICAS GENERALES")
        print(f"üìà Total de consultas: {stats['total_queries']:,}")
        print(f"üë• Usuarios √∫nicos: {stats['unique_users']:,}")
        print(f"‚è±Ô∏è  Tiempo promedio de procesamiento: {stats['average_processing_time']:.2f}s")
        print(f"üïí √öltima actualizaci√≥n: {stats['last_updated']}")
        
        # Usuarios m√°s activos
        if stats['top_users']:
            print_section("USUARIOS M√ÅS ACTIVOS")
            for i, user in enumerate(stats['top_users'][:10], 1):
                print(f"{i:2d}. {user['username']} ({user['user_id']}) - {user['count']} consultas")
        
        # Consultas m√°s comunes
        if stats['top_queries']:
            print_section("PALABRAS CLAVE M√ÅS COMUNES")
            for i, query in enumerate(stats['top_queries'][:15], 1):
                print(f"{i:2d}. '{query['keyword']}' - {query['count']} veces")
        
        # Consultas por hora del d√≠a
        if stats['queries_by_hour']:
            print_section("CONSULTAS POR HORA DEL D√çA")
            for hour in sorted(stats['queries_by_hour'].keys()):
                count = stats['queries_by_hour'][hour]
                bar = "‚ñà" * min(count // 5, 20)  # Barra de progreso
                print(f"{hour:02d}:00 - {count:3d} consultas {bar}")
        
        # Consultas por d√≠a de la semana
        if stats['queries_by_day']:
            print_section("CONSULTAS POR D√çA DE LA SEMANA")
            days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            for day in days_order:
                if day in stats['queries_by_day']:
                    count = stats['queries_by_day'][day]
                    bar = "‚ñà" * min(count // 3, 15)  # Barra de progreso
                    print(f"{day:10} - {count:3d} consultas {bar}")
        
        # Informaci√≥n adicional
        print_section("INFORMACI√ìN ADICIONAL")
        print("üíæ Los contextos se almacenan en: data/contexts/")
        print("üìÑ Formato: JSONL (una l√≠nea por consulta)")
        print("üîÑ Cache de estad√≠sticas: 5 minutos")
        print("üßπ Limpieza autom√°tica: 30 d√≠as por defecto")
        
    except Exception as e:
        logger.error(f"Error analizando contextos: {e}")
        print(f"‚ùå Error: {e}")

def export_contexts():
    """Exporta todos los contextos a un archivo JSON"""
    print_header("EXPORTAR CONTEXTOS")
    
    try:
        output_file = context_storage.export_contexts()
        if output_file:
            print(f"‚úÖ Contextos exportados exitosamente a: {output_file}")
        else:
            print("‚ùå Error exportando contextos")
    except Exception as e:
        logger.error(f"Error exportando contextos: {e}")
        print(f"‚ùå Error: {e}")

def show_user_contexts(user_id: str, limit: int = 10):
    """Muestra los contextos de un usuario espec√≠fico"""
    print_header(f"CONTEXTOS DEL USUARIO {user_id}")
    
    try:
        contexts = context_storage.get_user_contexts(user_id, limit)
        
        if not contexts:
            print(f"‚ùå No se encontraron contextos para el usuario {user_id}")
            return
        
        print(f"üìã Mostrando los √∫ltimos {len(contexts)} contextos:")
        
        for i, ctx in enumerate(contexts, 1):
            print(f"\n{i}. Consulta #{i}")
            print(f"   üìù Prompt: {ctx.prompt[:100]}{'...' if len(ctx.prompt) > 100 else ''}")
            print(f"   ‚è∞ Fecha: {ctx.timestamp}")
            print(f"   ‚è±Ô∏è  Tiempo: {ctx.processing_time:.2f}s")
            print(f"   üìö Documentos: {len(ctx.documents_used)}")
            if ctx.documents_used:
                print(f"      - {', '.join(ctx.documents_used[:3])}{'...' if len(ctx.documents_used) > 3 else ''}")
        
    except Exception as e:
        logger.error(f"Error mostrando contextos del usuario: {e}")
        print(f"‚ùå Error: {e}")

def cleanup_old_contexts(days: int = 30):
    """Limpia contextos antiguos"""
    print_header(f"LIMPIAR CONTEXTOS ANTIGUOS (> {days} d√≠as)")
    
    try:
        removed_count = context_storage.cleanup_old_contexts(days)
        print(f"‚úÖ Limpieza completada: {removed_count} contextos eliminados")
    except Exception as e:
        logger.error(f"Error limpiando contextos: {e}")
        print(f"‚ùå Error: {e}")

def main():
    """Funci√≥n principal del script"""
    if len(sys.argv) < 2:
        print("Uso: python analyze_contexts.py [comando] [opciones]")
        print("\nComandos disponibles:")
        print("  stats                    - Mostrar estad√≠sticas generales")
        print("  export                   - Exportar contextos a JSON")
        print("  user <user_id> [limit]   - Mostrar contextos de un usuario")
        print("  cleanup [days]           - Limpiar contextos antiguos")
        print("\nEjemplos:")
        print("  python analyze_contexts.py stats")
        print("  python analyze_contexts.py user 123456789 5")
        print("  python analyze_contexts.py cleanup 30")
        return
    
    command = sys.argv[1].lower()
    
    if command == "stats":
        analyze_contexts()
    elif command == "export":
        export_contexts()
    elif command == "user":
        if len(sys.argv) < 3:
            print("‚ùå Error: Debes especificar un user_id")
            return
        user_id = sys.argv[2]
        limit = int(sys.argv[3]) if len(sys.argv) > 3 else 10
        show_user_contexts(user_id, limit)
    elif command == "cleanup":
        days = int(sys.argv[2]) if len(sys.argv) > 2 else 30
        cleanup_old_contexts(days)
    else:
        print(f"‚ùå Comando no reconocido: {command}")

if __name__ == "__main__":
    main()
